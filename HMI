import tkinter as tk
from tkinter import messagebox
import json
import paho.mqtt.client as mqtt

# MQTT Configuration
BROKER = "127.0.0.1"  # Mosquitto broker's hostname
PORT = 1884           # Custom port
USERNAME = "admin"    # MQTT username
PASSWORD = "1234"     # MQTT password
CLIENT_ID = "HMI"     # Unique client ID
SUB_TOPIC = "xy_table/status"      # Subscription topic
PUB_TOPIC = "xy_table/commands"    # Publish topic

class XYTableHMI:
    def __init__(self, root):
        self.root = root
        self.root.title("XY Table HMI")

        # Initialize MQTT Client
        self.client = mqtt.Client(client_id=CLIENT_ID)
        self.client.username_pw_set(USERNAME, PASSWORD)  # Set username and password
        self.client.on_connect = self.on_connect
        self.client.on_message = self.on_message
        self.client.connect(BROKER, PORT, 60)
        self.client.loop_start()

        # Variables for MQTT data
        self.x_coord = tk.StringVar(value="0")
        self.y_coord = tk.StringVar(value="0")
        self.power_on = tk.StringVar(value="OFF")
        self.homed = tk.StringVar(value="No")

        # UI Layout
        self.create_widgets()

    def create_widgets(self):
        # Status Section
        tk.Label(self.root, text="Status", font=("Arial", 14)).grid(row=0, column=0, columnspan=2, pady=10)
        
        tk.Label(self.root, text="X Coordinate:").grid(row=1, column=0, sticky="e")
        tk.Label(self.root, textvariable=self.x_coord).grid(row=1, column=1, sticky="w")

        tk.Label(self.root, text="Y Coordinate:").grid(row=2, column=0, sticky="e")
        tk.Label(self.root, textvariable=self.y_coord).grid(row=2, column=1, sticky="w")

        tk.Label(self.root, text="Power On:").grid(row=3, column=0, sticky="e")
        tk.Label(self.root, textvariable=self.power_on).grid(row=3, column=1, sticky="w")

        tk.Label(self.root, text="Homed:").grid(row=4, column=0, sticky="e")
        tk.Label(self.root, textvariable=self.homed).grid(row=4, column=1, sticky="w")

        # Control Section
        tk.Label(self.root, text="Control", font=("Arial", 14)).grid(row=5, column=0, columnspan=2, pady=10)

        tk.Label(self.root, text="X Coordinate:").grid(row=6, column=0, sticky="e")
        self.x_entry = tk.Entry(self.root)
        self.x_entry.grid(row=6, column=1)

        tk.Label(self.root, text="Y Coordinate:").grid(row=7, column=0, sticky="e")
        self.y_entry = tk.Entry(self.root)
        self.y_entry.grid(row=7, column=1)

        tk.Button(self.root, text="Power On", command=self.send_power_on).grid(row=8, column=0, pady=5)
        tk.Button(self.root, text="Home", command=self.send_home).grid(row=8, column=1, pady=5)

        tk.Button(self.root, text="Reset", command=self.send_reset).grid(row=9, column=0, pady=5)
        tk.Button(self.root, text="Send Coordinates", command=self.send_coordinates).grid(row=9, column=1, pady=5)

    def send_power_on(self):
        self.publish_message({"command": "power_on"})
        messagebox.showinfo("Info", "Power On command sent.")

    def send_home(self):
        self.publish_message({"command": "home"})
        messagebox.showinfo("Info", "Home command sent.")

    def send_reset(self):
        self.publish_message({"command": "reset"})
        messagebox.showinfo("Info", "Reset command sent.")

    def send_coordinates(self):
        try:
            x = int(self.x_entry.get())
            y = int(self.y_entry.get())
            
            # Validate that the coordinates are within the allowed range
            if x < 0 or x > 250 or y < 0 or y > 250:
                messagebox.showerror("Error", "Coordinates must be between 0 and 250.")
            else:
                # Publish message if coordinates are valid
                self.publish_message({"X": x, "Y": y})
                messagebox.showinfo("Info", f"Coordinates ({x}, {y}) sent.")
        except ValueError:
            messagebox.showerror("Error", "Invalid coordinates. Please enter integers.")

    def publish_message(self, message):
        self.client.publish(PUB_TOPIC, json.dumps(message))

    def on_connect(self, client, userdata, flags, rc):
        if rc == 0:
            print("Connected successfully!")
            self.client.subscribe(SUB_TOPIC)
        else:
            messagebox.showerror("Error", f"Failed to connect to MQTT broker. Code: {rc}")

    def on_message(self, client, userdata, msg):
        try:
            data = json.loads(msg.payload.decode())
            self.x_coord.set(data.get("x", "N/A"))
            self.y_coord.set(data.get("y", "N/A"))
            self.power_on.set("ON" if data.get("power_on") else "OFF")
            self.homed.set("Yes" if data.get("homed") else "No")
        except json.JSONDecodeError:
            messagebox.showerror("Error", "Received invalid JSON.")

# Main Execution
if __name__ == "__main__":
    root = tk.Tk()
    app = XYTableHMI(root)
    root.mainloop()
